/* My solution */

class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> outcome;
        unordered_map<string, int> mymap;
        
        if (s.size() < 10)
            return outcome;
        
        for (int i = 9; i < s.size(); i++) {
            string substr = s.substr(i-9, 10);
            if (mymap.count(substr) == 0) {
                mymap[substr] = 1;
            } else if (mymap[substr] == 1) {
                outcome.push_back(substr);
                mymap[substr]++;
            }
        }
        
        return outcome;
    }
};

/* One of three top-rated solutions */
/*
Why? It's easier to code.

A is 0x41, C is 0x43, G is 0x47, T is 0x54. Still don't see it? Let me write it in octal.

A is 0101, C is 0103, G is 0107, T is 0124. The last digit in octal are different for all four letters. That's all we need!

We can simply use s[i] & 7 to get the last digit which are just the last 3 bits, it's much easier than lookup table or switch or a bunch of if and else, right?

We don't really need to generate the substring from the int. While counting the number of occurrences, we can push the substring into result as soon as the count becomes 2, so there won't be any duplicates in the result.

vector<string> findRepeatedDnaSequences(string s) {
    unordered_map<int, int> m;
    vector<string> r;
    int t = 0, i = 0, ss = s.size();
    while (i < 9)
        t = t << 3 | s[i++] & 7;
    while (i < ss)
        if (m[t = t << 3 & 0x3FFFFFFF | s[i++] & 7]++ == 1)
            r.push_back(s.substr(i - 10, 10));
    return r;
}
*/
